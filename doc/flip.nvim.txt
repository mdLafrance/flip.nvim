*flip.nvim.txt*                            Quickly flip between recent buffers

Author: Max Lafrance <github.com/mdlafrance>

==============================================================================
								       *flip*
CONTENTS

    1. ABOUT ....................... |flip-about|
    2. USAGE ....................... |flip-usage|
    3. REQUIREMENTS ................ |flip-requirements|
    4. COMMANDS .................... |flip-commands|
    5. CONFIGURATION ............... |flip-configuration|
	5.1 OPTIONS ................ |flip-configuration-options|
	5.1 LAZY ................... |flip-configuration-lazy|
    6. TIPS AND TRICKS ............. |flip-tips-and-tricks|

==============================================================================
								 *flip-about*
1. ABOUT 

TODO

==============================================================================
								 *flip-usage*
2. USAGE 

TODO

==============================================================================
							  *flip-requirements*
3. REQUIREMENTS

- Neovim 0.8 or higher is required.

- Flip depends on the following plugins:
  1. |plenary|
  2. |nvim-web-devicons|

  Ensure that these plugins are installed with your plugin manager of choice.

==============================================================================
							      *flip-commands*
3. COMMANDS

Flip exposes the following user commands:


*:TabbyHelp*
    
    Opens the flip help file. Exactly the same as running `:help flip-nvim`.


*:TabbyNewTab*

    Opens a telescope picker to browse for a file to open as a new tab.
    If the current window isn't a tab group, it is converted into one.

    If the current window is not writable, then a new window is opened with a tab 
    group.


*:TabbyCloseTab*

    Closes the current tab in the current tab group.


*:TabbyCloseOtherTabs*

    Closes all tabs except the current one on the current tab group.


*:TabbyConvertToTabGroup*

    Converts the current window into a tab group with the current buffer set
    as the first tab.


*:TabbyNextTab

    Cycle to the next tab in the current tab group.


*:TabbyPreviousTab*

    Cycle to the previous tab in the current tab group.


*:TabbySetTab* {index}

    Set the current tab in the current tab group to the tab at the given index.

    Arguments:
	{index} The index of the tab to switch to. 1-indexed like lua.


*:TabbyDetach* {direction}

    "Detaches" the current tab into a new window, performing a split in the
    specified direction.

    Arguments:
	{direction} The direction to split the tab group into. Valid values are
	left, right, above, and below - the same as vim's |:split|.

    Examples:
    >
	:TabbyDetach right


*:TabbyMerge* {direction}

    "Merges" the current tab or tab group into the closest window or tabgroup
    in the given direction. If the target window is not a tab group, it is
    first converted into one.

    Arguments:
	{direction} The direction to merge in. Valid values are "up", "down",
	"left", "right".

    Examples:
    >
	:TabbyMerge right


*:TabbyShowTabs*

    Prints information about all currently registered tab groups. For
    debugging purposes.

==============================================================================
							 *flip-configuration*
5. CONFIGURATION

Flip must be initialized at startup by calling the *flip-setup()* function. 

At what point you call the setup function depends on your neovim plugin 
manager of choice.

-----------------------------------------------------------------------------
						    *flip-configuration-options*
5.1 OPTIONS

`setup()` accepts a table with the following options:
>
    require("flip").setup({
	remove_tab_group_if_only_tab = true,
	show_icon_in_tab_bar = true,
	show_close_all_button_in_tab_bar = true,
	debug = false,
	suppress_notifications = false,
    })
<


`remove_tab_group_if_only_tab` (default: true)

    If true, then when a tab becomes the only tab in the group, the tab
    group is removed (the buffer stays open).


`show_icon_in_tab_bar` (default: true)

   If true, an icon for the current filetype is shown in the tab bar. 


`show_close_all_button_in_tab_bar` (default: true)

    If true, a button is shown in the tab bar which closes all tabs.


`debug` (default: false)

    If true, then enables debug logging.


`suppress_notifications` (default: false)

    If true, then no notifications are shown when a tab is closed.
    Notifications are triggered to warn the user of unsupported behavior.


-----------------------------------------------------------------------------
						    *flip-configuration-lazy*
5.2 LAZY

If using Lazy.nvim, the following snippet is enough to enable Flip:
>
    return {
	"mdlafrance/flip-nvim",
	opts = {
	    -- options
	}
    }
<
or
>
    return {
	"mdlafrance/flip-nvim",
	config = function()
	    require("flip").setup({
		-- options
	    })
	end
    }

It's important to either define a *config()* function which calls Flip's
setup function, or to provide opts so that lazy will call the setup function
itself.


-----------------------------------------------------------------------------
						       *flip-tips-and-tricks*
6. TIPS AND TRICKS

Defining some keymaps can be usefule for quickly managing tabs. For example:
>
    vim.keymap.set("n", "<leader>nt", ":TabbyNewTab<CR>", {})
    vim.keymap.set("n", "<leader>cl", ":TabbyCloseTab<CR>", {})

    vim.keymap.set("n", "<leader>[", ":TabbyPreviousTab<CR>", {})
    vim.keymap.set("n", "<leader>]", ":TabbyNextTab<CR>", {})

    vim.keymap.set("n", "<leader>tdr", ":TabbyDetach right<CR>", {})
    vim.keymap.set("n", "<leader>tdd", ":TabbyDetach below<CR>", {})

    vim.keymap.set("n", "<leader>tmr", ":TabbyMerge right<CR>", {})
    vim.keymap.set("n", "<leader>tml", ":TabbyMerge left<CR>", {})







vim:tw=78:ts=8:noet:ft=help:norl:
